Предмет: "Практикум на ЭВМ" (магистранты).

Аннотация: ссылки на учебные материалы, технические аспекты, связанные с установкой и настройкой python.

<h3> Учим python </h3>
Для начального обучения категорически рекомендую online-сервис
<a href='http://pythontutor.ru/'> Питонтьютор </a>
Курс содержит около 128 задач самого простого уровня, которые можно сделать за неделю активной работы. При этом даже ставить ничего не нужно - всё запускается в браузере.



<h3> Настраиваем python + matplotlib в Ubuntu </h3>
Если у Вас установлена Ubuntu 16.04 и выше, то интерпретатор уже есть. Убедиться в этом можно, запустив его в терминале:
<code>
 python3
</code>
Теперь в терминале вместо приветственного доллара будет много-много больше. Попробуем найти сумму двух чисел
<code>
 2 + 3
</code>
Не забываем подтвердить наши буйные намерения клавишей enter. В правильной вселенной в терминале появится 5 в ответ. Завершить сессию можно комбинацией Ctrl + D.

Чтобы не работать в интерпретаторе, наберем команды в файле с помощью любого текстового редактора (gedit, nano, vim и далее) и сохраним (например, под названием 'sem_0.py'). Далее запустить выполнение можно командой:
<code>
 python3 sem_0.py
</code>

Для отрисовки графики нужна библиотека matplotlib, которую поставим через pip - менеджер пакетов для python:
<code>
 sudo apt install python3-pip
</code>

Ставим библиотеку matplotlib:
<code>
 sudo pip3 install matplotlib
</code>

Теперь убедимся, что картинки рисуются. Подключим класс pylab из matplotlib (и обзовем его plt). Далее подготовим список значений, которые хотим отрисовать. Добавим соответствующие точки на плоскость методом plot() и посмотрим на результат методом show().
<code>
 python3
from matplotlib import pylab as plt
y = [1, 5, 2, 4, 3]
plt.plot(y)
plt.show()
</code>


<h3> Настраиваем python + matplotlib в Windows </h3>

Скачиваем с официального сайта (сейчас доступна версия 3.7.0)
<a href='https://www.python.org/downloads/windows/'> www.python.org </a>

В начале установки не забудьте отметить галочкой “Add Python 3.x to PATH”. После установки ищем в меню программ и запускаем IDLE (Python GUI). Открывается python shell, в котором можно интерпретировать поочередно команды. В терминале нас встречает знак много-много больше. Попробуем найти сумму 2 + 3
<code>
 2 + 3
</code>
В правильной вселенной в терминале должна появиться пятерка в ответ. 

А если нажать File - New, то откроется второе окно, в котором можно уже писать многострочные скрипты. Запустить скрипт можно клавишей F5.

Для отрисовки графики нужна библиотека matplotlib, которую поставим через pip - менеджер пакетов для python. По логике, менеджер пакетов pip3 установиться вместо python. Ставим библиотеку matplotlib:
<code>
 pip3 install matplotlib
</code>

Теперь убедимся, что картинки рисуются. Подключим класс pylab из matplotlib (и обзовем его plt). Далее подготовим список значений, которые хотим отрисовать. Добавим соответствующие точки на плоскость методом plot() и посмотрим на результат методом show().
<code>
from matplotlib import pylab as plt
y = [1, 5, 2, 4, 3]
plt.plot(y)
plt.show()
</code>


<h3> Нулевая семестровая работа </h3>
Пример явной разностной схемы для уравнения теплопроводности
<file 'python/sem_0.py'> sem_0.py</file>

<code>
# coding: utf-8

# Начальные условия $u_0(x)$
def u0(x):
	return 1.0 - (x - 0.5)**2

# Граничные условия $\varphi_1(x)$, $\varphi_2(x)$
def phi1(t):
	return 0.0
def phi2(t):
	return 0.0

# Параметры задачи: $\mu$ - коэффициент теплопроводности, $T$ - время искомого распределения температуры
mu = 0.1
T = 1.0

# Сетка по пространству
n = 10
h = 1.0 / n
x = [i * h for i in range(0, n + 1)]

# Сетка по времени
m = 50
tau = T / m
t = [k * tau for k in range(0, m + 1)]

# Условие устойчивости
r = 2 * mu * tau / h / h
print(tau, h, r)

# Инициализация начального слоя
y = [u0(x[i]) for i in range(0, n + 1)]
for i in range(0, n + 1):
	y[i] = u0(x[i])

# Счет
ynew = [0] * (n + 1)
for k in range(0, m):
	y[0] = phi1(t[k])
	y[n] = phi2(t[k])
	for i in range(1, n):
		ynew[i] = y[i] + tau * mu / h / h * (y[i+1] - 2 * y[i] + y[i-1])
	y = list(ynew)

# Вывод
print(x)
print(y)

# График
from matplotlib import pylab as plt
plt.plot(x, y)
plt.show()
</code>



<h3> Настраиваем jupyter в Ubuntu (опционально) </h3>

Если Вы хотите, чтобы вся работа интерпретировалась в браузере, то следует установить отдельный пакет для веб-интерфейса jupyter.

Вариант 1. Авторы крайне рекомендуют ставить не просто юпитер, а целую анаконду (сборник всех пакетов на 600 Мб, который при распаковке даст 3 Гб). Можно повторить данные команды, где вместо alen будет имя вашего пользователя

<code>
 cd /tmp
 wget https://repo.anaconda.com/archive/Anaconda3-5.2.0-Linux-x86_64.sh
 bash Anaconda3-5.2.0-Linux-x86_64.sh
 export PATH="/home/alen/anaconda3/bin:$PATH"
</code>

Вариант 2. 
<code>
 sudo apt install jupyter
</code>

В обоих вариантах появится возможность запуска юпитера. А точнее запускаем локальный веб-сервер с интерпетатором
<code>
 jupyter notebook
</code>
Терминал во время работы веб-сервера закрывать нельзя. В открывшемся бразуере будет запущена страница localhost:8888/tree, которая показывает структуру в домашней директории. На этом установка завершена.



<h3> Настраиваем jupyter в Windows (опционально) </h3>

Если Вы хотите, чтобы вся работа интерпретировалась в браузере, то следует установить отдельный пакет для веб-интерфейса jupyter. Авторы крайне рекомендуют ставить не просто юпитер, а целую анаконду (сборник всех пакетов на 600 Мб, который при распаковке даст 3 Гб). 

<a href='https://conda.io/docs/user-guide/install/windows.html'> conda.io </a>

Теперь можно запустить локальный веб-сервер с интерпетатором
<code>
 jupyter notebook
</code>
В открывшемся бразуере будет запущена страница localhost:8888/tree, которая показывает структуру в домашней директории. На этом установка завершена.


<h3> Работа в jupyter </h3>

Зайдем в дереве каталогов, которое поазывает браузер в соответствующее место на диске и создадим так называемый notebook. Нажимаем New в правом верхнем углу и выбираем Python 3. Теперь можем набирать описание (markup) или код (code) в виде блоков. 
<code>
		Описание

In [1]  2+3
</code>

Более наглядная и подробная информация есть по ссылке:
<a href='https://devpractice.ru/python-lesson-6-work-in-jupyter-notebook/'> devpractice.ru </a>

Для ввода есть 2 режима: набора и управления (прям как в знаменитом vim). 
<table>
<tr><td> Режим набора </td><td> enter  </td></tr>
<tr><td> Режим управления </td><td> escape </td></tr> 
<tr><td> Все горячие клавиши </td><td> h </td></tr>
<tr><td> Добавить блок сверху </td><td> a </td></tr>
<tr><td> Добавить блок снизу </td><td> b </td></tr>
<tr><td> Сделать блок описанием </td><td> m </td></tr>
<tr><td> Сделать блок кодом </td><td> y </td></tr>
<tr><td> Сделать заголовок </td><td> 1 </td></tr>
<tr><td> Запустить и перейти ниже </td><td> shift + enter </td></tr>
<tr><td> Запустить и остаться </td><td> ctrl + enter </td></tr>
</table>

Данная штука дает две интересных возможности - удобная отладка и сопровождение читаемым текстом с поддержкой LaTeX.

Файл нулевой семестровки для скачивания (открыть в браузере): 
<file 'python/sem_0.ipynb'> sem_0.ipynb </file>
